// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShowBooking.Models;

#nullable disable

namespace ShowBooking.Migrations
{
    [DbContext(typeof(ShowContext))]
    [Migration("20240914031324_UniqueEmailConstraint")]
    partial class UniqueEmailConstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShowBooking.Models.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieID"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ShowBooking.Models.MovieInTheatre", b =>
                {
                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("TheatreID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("MovieID", "TheatreID");

                    b.HasIndex("TheatreID");

                    b.ToTable("MoviesInTheatre");
                });

            modelBuilder.Entity("ShowBooking.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ShowBooking.Models.Seat", b =>
                {
                    b.Property<int>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ScreenID")
                        .HasColumnType("int");

                    b.Property<int>("SeatColumn")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SeatRow")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("TicketTypeID")
                        .HasColumnType("int");

                    b.HasKey("SeatID");

                    b.HasIndex("ScreenID");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("ShowBooking.Models.ShowSeat", b =>
                {
                    b.Property<int>("ShowSeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowSeatID"));

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int>("SeatID")
                        .HasColumnType("int");

                    b.Property<int>("ShowID")
                        .HasColumnType("int");

                    b.HasKey("ShowSeatID");

                    b.HasIndex("SeatID");

                    b.HasIndex("ShowID");

                    b.ToTable("ShowSeats");
                });

            modelBuilder.Entity("ShowBooking.Models.Theatre", b =>
                {
                    b.Property<int>("TheatreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheatreID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TheatreAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TheatreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TheatreID");

                    b.HasIndex("UserID");

                    b.ToTable("Theatres");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreBooking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShowID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("ShowID");

                    b.HasIndex("UserID");

                    b.ToTable("TheatreBookings");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreScreen", b =>
                {
                    b.Property<int>("ScreenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreenID"));

                    b.Property<string>("ScreenName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ScreenType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.Property<int>("TheatreID")
                        .HasColumnType("int");

                    b.HasKey("ScreenID");

                    b.HasIndex("TheatreID");

                    b.ToTable("TheatreScreens");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreShow", b =>
                {
                    b.Property<int>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowID"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("ScreenID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<TimeSpan>("ShowTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShowID");

                    b.HasIndex("MovieID");

                    b.HasIndex("ScreenID");

                    b.ToTable("TheatreShows");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreTicket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"));

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShowSeatID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TicketTypeID")
                        .HasColumnType("int");

                    b.HasKey("TicketID");

                    b.HasIndex("BookingID");

                    b.HasIndex("ShowSeatID");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("TheatreTickets");
                });

            modelBuilder.Entity("ShowBooking.Models.TicketType", b =>
                {
                    b.Property<int>("TicketTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeID"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ScreenID")
                        .HasColumnType("int");

                    b.Property<string>("TicketTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TicketTypeID");

                    b.HasIndex("ScreenID");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("ShowBooking.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShowBooking.Models.MovieInTheatre", b =>
                {
                    b.HasOne("ShowBooking.Models.Movie", "Movie")
                        .WithMany("MoviesInTheatre")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowBooking.Models.Theatre", "Theatre")
                        .WithMany("MoviesInTheatre")
                        .HasForeignKey("TheatreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("ShowBooking.Models.Seat", b =>
                {
                    b.HasOne("ShowBooking.Models.TheatreScreen", "TheatreScreen")
                        .WithMany("Seats")
                        .HasForeignKey("ScreenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowBooking.Models.TicketType", "TicketType")
                        .WithMany("Seats")
                        .HasForeignKey("TicketTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheatreScreen");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("ShowBooking.Models.ShowSeat", b =>
                {
                    b.HasOne("ShowBooking.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowBooking.Models.TheatreShow", "TheatreShow")
                        .WithMany("ShowSeats")
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("TheatreShow");
                });

            modelBuilder.Entity("ShowBooking.Models.Theatre", b =>
                {
                    b.HasOne("ShowBooking.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreBooking", b =>
                {
                    b.HasOne("ShowBooking.Models.TheatreShow", "TheatreShow")
                        .WithMany()
                        .HasForeignKey("ShowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowBooking.Models.User", "User")
                        .WithMany("TheatreBookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheatreShow");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreScreen", b =>
                {
                    b.HasOne("ShowBooking.Models.Theatre", "Theatre")
                        .WithMany("TheatreScreens")
                        .HasForeignKey("TheatreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreShow", b =>
                {
                    b.HasOne("ShowBooking.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowBooking.Models.TheatreScreen", "TheatreScreen")
                        .WithMany("TheatreShows")
                        .HasForeignKey("ScreenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("TheatreScreen");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreTicket", b =>
                {
                    b.HasOne("ShowBooking.Models.TheatreBooking", "TheatreBooking")
                        .WithMany("TheatreTickets")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowBooking.Models.ShowSeat", "ShowSeat")
                        .WithMany()
                        .HasForeignKey("ShowSeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowBooking.Models.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShowSeat");

                    b.Navigation("TheatreBooking");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("ShowBooking.Models.TicketType", b =>
                {
                    b.HasOne("ShowBooking.Models.TheatreScreen", "TheatreScreen")
                        .WithMany()
                        .HasForeignKey("ScreenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheatreScreen");
                });

            modelBuilder.Entity("ShowBooking.Models.User", b =>
                {
                    b.HasOne("ShowBooking.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ShowBooking.Models.Movie", b =>
                {
                    b.Navigation("MoviesInTheatre");
                });

            modelBuilder.Entity("ShowBooking.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShowBooking.Models.Theatre", b =>
                {
                    b.Navigation("MoviesInTheatre");

                    b.Navigation("TheatreScreens");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreBooking", b =>
                {
                    b.Navigation("TheatreTickets");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreScreen", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("TheatreShows");
                });

            modelBuilder.Entity("ShowBooking.Models.TheatreShow", b =>
                {
                    b.Navigation("ShowSeats");
                });

            modelBuilder.Entity("ShowBooking.Models.TicketType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("ShowBooking.Models.User", b =>
                {
                    b.Navigation("TheatreBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
